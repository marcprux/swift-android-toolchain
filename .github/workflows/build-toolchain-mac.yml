name: Swift Android Build Matrix

on:
  workflow_dispatch:
  push:
    branches:
      - '*'
  pull_request_target:
    branches:
      - '*'
  schedule:
    - cron: '30 8 * * *'

jobs:
  build:
    name: Android NDK ${{ matrix.ndk }} Swift ${{ matrix.swift }}
    timeout-minutes: 600

    strategy:
      matrix:
        xcode: ['13.3.1', '14.0.1']
        #xcode: ['13.3.1']


    runs-on: macOS-12
    env:
      NDK_VERSION: ${{ matrix.ndkversion }}

    concurrency:
      group: ${{ matrix.ndk }}-${{ matrix.swift }}-${{ matrix.xcode }}-${{ github.head_ref || github.run_id }}
      cancel-in-progress: true

    steps:
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ matrix.xcode }}

      - uses: actions/checkout@master

      - uses: nttld/setup-ndk@v1
        with:
          ndk-version: ${{ matrix.ndk }}

      - name: Install dependencies
        run: |
          brew update
          brew install cmake ninja autoconf automake libtool pkg-config git-lfs curl gfortran android-platform-tools

      - name: Setup NDK
        run: |
          echo ${{ matrix.ndkversion }} > NDK_VERSION

          curl -O -fsSL ${{ matrix.ndkurl }}
          # TODO: handle .dmg (which is how recent NDK versions are packaged)
          # e.g.: 
          # hdiutil attach -plist -nobrowse -readonly -mountrandom /tmp/droid android-ndk-r25b-darwin.dmg
          # cp -a /tmp/droid/dmg.IfDPvM/AndroidNDK8937393.app/Contents/NDK ./${{ matrix.ndkversion }}
          unzip -qq $(basename ${{ matrix.ndkurl }}) -d ./${{ matrix.ndkversion }}

          sudo mkdir -p /usr/local/ndk
          sudo ln -vsif ${GITHUB_WORKSPACE}/${{ matrix.ndkversion }}/android-ndk-${{ matrix.ndk }} /usr/local/ndk/${{ matrix.ndkversion }} 

          echo $(ls /usr/local/ndk/${{ matrix.ndkversion }})
          echo $(ls /Users/runner/Library/Android/sdk/ndk/)
          echo $(ls /Users/runner/Library/Android/sdk/ndk/${{ matrix.ndkversion }})

      - name: Cache Toolchain
        uses: ./.github/actions/cache-always
        with:
          key: swift-android-toolchain-cache-swift-${{ matrix.swift }}-ndk-${{ matrix.ndk }}
          path: |
            ./ToolChain

      - name: Check before build
        run: |
          which cmake
          which ninja
          which autoconf
          which aclocal
          which glibtool
          which pkg-config
          which git-lfs
          xcode-select --print-path

      - name: Setup Swift ${{ matrix.swift }}
        run: |
          sed -I "" 's; swift: ".*",; swift: ${{ matrix.tag-swift }},;g' lib/Git/Revision.js
          sed -I "" 's; dispatch: ".*",; dispatch: ${{ matrix.tag-dispatch }},;g' lib/Git/Revision.js
          sed -I "" 's; foundation: ".*",; foundation: ${{ matrix.tag-foundation }},;g' lib/Git/Revision.js
          sed -I "" 's; llvm: ".*",; llvm: ${{ matrix.tag-llvm }},;g' lib/Git/Revision.js
          sed -I "" 's; cmark: ".*",; cmark: ${{ matrix.tag-cmark }},;g' lib/Git/Revision.js
          sed -I "" 's; spm: ".*",; spm: ${{ matrix.tag-spm }},;g' lib/Git/Revision.js
          sed -I "" 's; llb: ".*",; llb: ${{ matrix.tag-llb }},;g' lib/Git/Revision.js
          sed -I "" 's; tsc: ".*",; tsc: ${{ matrix.tag-tsc }},;g' lib/Git/Revision.js
          sed -I "" 's; sd: ".*",; sd: ${{ matrix.tag-sd }},;g' lib/Git/Revision.js

      - name: Build
        run: |
          node main.js bootstrap

      - name: Check Swift Version
        # e.g.: Swift version 5.5.2 (swift-5.5.2-RELEASE) Target: x86_64-apple-darwin21.6.0
        run: |
          ./ToolChain/swift-android-toolchain/usr/bin/swift --version
          mv ./ToolChain/swift-android-toolchain.tar.gz ./ToolChain/swift-${{ matrix.swift }}-android-ndk-${{matrix.ndk }}-xcode-${{ matrix.xcode }}-toolchain.tar.gz

      - name: Upload Archive
        uses: actions/upload-artifact@v3
        with:
          #name: Toolchain build archive
          #path: ./ToolChain/swift-android-toolchain.tar.gz
          path: ./ToolChain/swift-${{ matrix.swift }}-android-ndk-${{matrix.ndk }}-xcode-${{ matrix.xcode }}-toolchain.tar.gz

      # Create a new release for this tag
      - name: "Create Release"
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Creating release: ${GITHUB_REF#refs/tags/}"
          # create a pre-release if it doesn't already exist 
          gh release create "${GITHUB_REF#refs/tags/}" --prerelease --title "Release ${GITHUB_REF#refs/tags/}" --generate-notes || true
          gh release upload "${GITHUB_REF#refs/tags/}" -- ./ToolChain/swift-${{ matrix.swift }}-android-ndk-${{matrix.ndk }}-xcode-${{ matrix.xcode }}-toolchain.tar.gz

